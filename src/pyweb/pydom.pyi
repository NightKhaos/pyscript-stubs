"""
PyDom is a Python module that exposes the power of the web with an easy and idiomatic Pythonic interface on top.
"""
from __future__ import annotations

import sys
from functools import cached_property
from typing import Any, cast

# TODO: Add typehints to PyDom
# TODO: Determine if property setter methods need to be included in the type hints
# TODO: Can these be put inline in pyweb directly with pyweb/pydom as a separate package?

class BaseElement:
    def __init__(self, js_element): ...
    def __eq__(self, obj):
        """
        Check if the element is the same as the other element by comparing
        the underlying JS element
        """
        ...
    @property
    def parent(self): ...
    @property
    def __class(self): ...
    def create(self, type_, is_child: bool = True, classes=None, html=None, label=None): ...
    def find(self, selector: str) -> ElementCollection:
        """
        Return an ElementCollection representing all the child elements that
        match the specified selector.

        :param selector : A string containing a selector expression
        :return: A collection of elements matching the selector
        """
        ...

class Element(BaseElement):
    @property
    def children(self): ...
    def append(self, child): ...

    # -------- Pythonic Interface to Element -------- #
    @property
    def html(self): ...

    # @html.setter
    # def html(self, value):
    #    ...

    @property
    def content(self): ...

    # @content.setter
    # def content(self, value):
    #    ...

    @property
    def id(self): ...

    # @id.setter
    # def id(self, value):
    #    ...

    @property
    def value(self): ...

    # @value.setter
    # def value(self, value):
    #    ...

    def clone(self, new_id=None): ...
    def remove_class(self, classname): ...
    def add_class(self, classname): ...
    @property
    def classes(self): ...
    def show_me(self): ...

class StyleProxy(dict):
    def __init__(self, element: Element) -> None: ...
    @cached_property
    def _style(self): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...
    def remove(self, key): ...
    def set(self, **kws): ...
    @property
    def visible(self): ...

    # @visible.setter
    # def visible(self, value):
    #    ...

class StyleCollection:
    def __init__(self, collection: "ElementCollection") -> None: ...
    def __get__(self, obj, objtype=None): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...
    def remove(self, key): ...

class ElementCollection:
    def __init__(self, elements: list[Element]) -> None: ...
    def __getitem__(self, key): ...
    def __len__(self): ...
    def __eq__(self, obj):
        """
        Check if the element is the same as the other element by comparing
        the underlying JS element
        """
        ...
    def _get_attribute(self, attr, index=None): ...
    def _set_attribute(self, attr, value): ...
    @property
    def html(self): ...

    # @html.setter
    # def html(self, value):
    #    ...

    @property
    def value(self): ...

    # @value.setter
    # def value(self, value):
    #     ...

    @property
    def children(self): ...
    def __iter__(self): ...
    def __repr__(self): ...

class DomScope:
    def __getattr__(self, __name: str) -> Any: ...

class PyDom(BaseElement):
    # Add objects we want to expose to the DOM namespace since this class instance is being
    # remapped as "the module" itself
    BaseElement = BaseElement
    Element = Element
    ElementCollection = ElementCollection

    def __init__(self): ...
    def create(self, type_, classes=None, html=None, **kwargs): ...
    def __getitem__(self, key): ...

# TODO: Are these relevant to the type hints?
dom = PyDom()
